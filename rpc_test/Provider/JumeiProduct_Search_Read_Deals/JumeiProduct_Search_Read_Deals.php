<?php
namespace Provider\JumeiProduct_Search_Read_Deals;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface JumeiProduct_Search_Read_DealsIf {
  public function getGlobalDealDetailForSearch($hashIdArr);
  public function getDealDetailForSearch($hashIdArr);
  public function getMallDetailForSearch($productIdArr);
  public function getPopDetailForSearch($hashIdArr);
  public function getGlobalMallDetailForSearch($productIdArr);
  public function getPidOfJumeiMallByLimit($minPid, $limit);
  public function getHashIdOfPOPByLimit($minDealId, $limit);
  public function getJumeiDataWithMinDealIdAndLimit($minDealId, $limit);
  public function getPOPMallProductIds($minProductId, $limit);
  public function getMallDataWithMallIdAndLimit($minMallId, $limit);
  public function getGlobalDealDatas();
  public function getGlobalDealDatasWithDealIdAndLimit($minDealId, $limit);
  public function getpPomoCardsDeal();
  public function getPopMallDetailForSearch($productIds);
  public function getHashIdByProdcutId($productIds);
  public function getGlobalPOPMallDetailForSearch($productIdArr);
  public function getGlobalPOPMallDataWithMallIdAndLimit($minMallId, $limit);
  public function getYQTByTypeLimit($minDealId, $limit, $type);
}

class JumeiProduct_Search_Read_DealsClient implements \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_DealsIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getGlobalDealDetailForSearch($hashIdArr)
  {
    $this->send_getGlobalDealDetailForSearch($hashIdArr);
    return $this->recv_getGlobalDealDetailForSearch();
  }

  public function send_getGlobalDealDetailForSearch($hashIdArr)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_args();
    $args->hashIdArr = $hashIdArr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGlobalDealDetailForSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGlobalDealDetailForSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGlobalDealDetailForSearch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGlobalDealDetailForSearch failed: unknown result");
  }

  public function getDealDetailForSearch($hashIdArr)
  {
    $this->send_getDealDetailForSearch($hashIdArr);
    return $this->recv_getDealDetailForSearch();
  }

  public function send_getDealDetailForSearch($hashIdArr)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getDealDetailForSearch_args();
    $args->hashIdArr = $hashIdArr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getDealDetailForSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getDealDetailForSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getDealDetailForSearch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getDealDetailForSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getDealDetailForSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getDealDetailForSearch failed: unknown result");
  }

  public function getMallDetailForSearch($productIdArr)
  {
    $this->send_getMallDetailForSearch($productIdArr);
    return $this->recv_getMallDetailForSearch();
  }

  public function send_getMallDetailForSearch($productIdArr)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getMallDetailForSearch_args();
    $args->productIdArr = $productIdArr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMallDetailForSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMallDetailForSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMallDetailForSearch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getMallDetailForSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getMallDetailForSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getMallDetailForSearch failed: unknown result");
  }

  public function getPopDetailForSearch($hashIdArr)
  {
    $this->send_getPopDetailForSearch($hashIdArr);
    return $this->recv_getPopDetailForSearch();
  }

  public function send_getPopDetailForSearch($hashIdArr)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPopDetailForSearch_args();
    $args->hashIdArr = $hashIdArr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPopDetailForSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPopDetailForSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPopDetailForSearch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPopDetailForSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPopDetailForSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPopDetailForSearch failed: unknown result");
  }

  public function getGlobalMallDetailForSearch($productIdArr)
  {
    $this->send_getGlobalMallDetailForSearch($productIdArr);
    return $this->recv_getGlobalMallDetailForSearch();
  }

  public function send_getGlobalMallDetailForSearch($productIdArr)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_args();
    $args->productIdArr = $productIdArr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGlobalMallDetailForSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGlobalMallDetailForSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGlobalMallDetailForSearch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGlobalMallDetailForSearch failed: unknown result");
  }

  public function getPidOfJumeiMallByLimit($minPid, $limit)
  {
    $this->send_getPidOfJumeiMallByLimit($minPid, $limit);
    return $this->recv_getPidOfJumeiMallByLimit();
  }

  public function send_getPidOfJumeiMallByLimit($minPid, $limit)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_args();
    $args->minPid = $minPid;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPidOfJumeiMallByLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPidOfJumeiMallByLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPidOfJumeiMallByLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPidOfJumeiMallByLimit failed: unknown result");
  }

  public function getHashIdOfPOPByLimit($minDealId, $limit)
  {
    $this->send_getHashIdOfPOPByLimit($minDealId, $limit);
    return $this->recv_getHashIdOfPOPByLimit();
  }

  public function send_getHashIdOfPOPByLimit($minDealId, $limit)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_args();
    $args->minDealId = $minDealId;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getHashIdOfPOPByLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getHashIdOfPOPByLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getHashIdOfPOPByLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getHashIdOfPOPByLimit failed: unknown result");
  }

  public function getJumeiDataWithMinDealIdAndLimit($minDealId, $limit)
  {
    $this->send_getJumeiDataWithMinDealIdAndLimit($minDealId, $limit);
    return $this->recv_getJumeiDataWithMinDealIdAndLimit();
  }

  public function send_getJumeiDataWithMinDealIdAndLimit($minDealId, $limit)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_args();
    $args->minDealId = $minDealId;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getJumeiDataWithMinDealIdAndLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getJumeiDataWithMinDealIdAndLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getJumeiDataWithMinDealIdAndLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getJumeiDataWithMinDealIdAndLimit failed: unknown result");
  }

  public function getPOPMallProductIds($minProductId, $limit)
  {
    $this->send_getPOPMallProductIds($minProductId, $limit);
    return $this->recv_getPOPMallProductIds();
  }

  public function send_getPOPMallProductIds($minProductId, $limit)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPOPMallProductIds_args();
    $args->minProductId = $minProductId;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPOPMallProductIds', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPOPMallProductIds', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPOPMallProductIds()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPOPMallProductIds_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPOPMallProductIds_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPOPMallProductIds failed: unknown result");
  }

  public function getMallDataWithMallIdAndLimit($minMallId, $limit)
  {
    $this->send_getMallDataWithMallIdAndLimit($minMallId, $limit);
    return $this->recv_getMallDataWithMallIdAndLimit();
  }

  public function send_getMallDataWithMallIdAndLimit($minMallId, $limit)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_args();
    $args->minMallId = $minMallId;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMallDataWithMallIdAndLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMallDataWithMallIdAndLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMallDataWithMallIdAndLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getMallDataWithMallIdAndLimit failed: unknown result");
  }

  public function getGlobalDealDatas()
  {
    $this->send_getGlobalDealDatas();
    return $this->recv_getGlobalDealDatas();
  }

  public function send_getGlobalDealDatas()
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDatas_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGlobalDealDatas', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGlobalDealDatas', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGlobalDealDatas()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDatas_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDatas_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGlobalDealDatas failed: unknown result");
  }

  public function getGlobalDealDatasWithDealIdAndLimit($minDealId, $limit)
  {
    $this->send_getGlobalDealDatasWithDealIdAndLimit($minDealId, $limit);
    return $this->recv_getGlobalDealDatasWithDealIdAndLimit();
  }

  public function send_getGlobalDealDatasWithDealIdAndLimit($minDealId, $limit)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_args();
    $args->minDealId = $minDealId;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGlobalDealDatasWithDealIdAndLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGlobalDealDatasWithDealIdAndLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGlobalDealDatasWithDealIdAndLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGlobalDealDatasWithDealIdAndLimit failed: unknown result");
  }

  public function getpPomoCardsDeal()
  {
    $this->send_getpPomoCardsDeal();
    return $this->recv_getpPomoCardsDeal();
  }

  public function send_getpPomoCardsDeal()
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getpPomoCardsDeal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getpPomoCardsDeal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getpPomoCardsDeal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getpPomoCardsDeal failed: unknown result");
  }

  public function getPopMallDetailForSearch($productIds)
  {
    $this->send_getPopMallDetailForSearch($productIds);
    return $this->recv_getPopMallDetailForSearch();
  }

  public function send_getPopMallDetailForSearch($productIds)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_args();
    $args->productIds = $productIds;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPopMallDetailForSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPopMallDetailForSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPopMallDetailForSearch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPopMallDetailForSearch failed: unknown result");
  }

  public function getHashIdByProdcutId($productIds)
  {
    $this->send_getHashIdByProdcutId($productIds);
    return $this->recv_getHashIdByProdcutId();
  }

  public function send_getHashIdByProdcutId($productIds)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_args();
    $args->productIds = $productIds;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getHashIdByProdcutId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getHashIdByProdcutId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getHashIdByProdcutId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getHashIdByProdcutId failed: unknown result");
  }

  public function getGlobalPOPMallDetailForSearch($productIdArr)
  {
    $this->send_getGlobalPOPMallDetailForSearch($productIdArr);
    return $this->recv_getGlobalPOPMallDetailForSearch();
  }

  public function send_getGlobalPOPMallDetailForSearch($productIdArr)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_args();
    $args->productIdArr = $productIdArr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGlobalPOPMallDetailForSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGlobalPOPMallDetailForSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGlobalPOPMallDetailForSearch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGlobalPOPMallDetailForSearch failed: unknown result");
  }

  public function getGlobalPOPMallDataWithMallIdAndLimit($minMallId, $limit)
  {
    $this->send_getGlobalPOPMallDataWithMallIdAndLimit($minMallId, $limit);
    return $this->recv_getGlobalPOPMallDataWithMallIdAndLimit();
  }

  public function send_getGlobalPOPMallDataWithMallIdAndLimit($minMallId, $limit)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_args();
    $args->minMallId = $minMallId;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGlobalPOPMallDataWithMallIdAndLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGlobalPOPMallDataWithMallIdAndLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGlobalPOPMallDataWithMallIdAndLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGlobalPOPMallDataWithMallIdAndLimit failed: unknown result");
  }

  public function getYQTByTypeLimit($minDealId, $limit, $type)
  {
    $this->send_getYQTByTypeLimit($minDealId, $limit, $type);
    return $this->recv_getYQTByTypeLimit();
  }

  public function send_getYQTByTypeLimit($minDealId, $limit, $type)
  {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_args();
    $args->minDealId = $minDealId;
    $args->limit = $limit;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getYQTByTypeLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getYQTByTypeLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getYQTByTypeLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getYQTByTypeLimit failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_args {
  static $_TSPEC;

  public $hashIdArr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hashIdArr',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hashIdArr'])) {
        $this->hashIdArr = $vals['hashIdArr'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->hashIdArr = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = '';
              $xfer += $input->readI64($key5);
              $xfer += $input->readString($val6);
              $this->hashIdArr[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_args');
    if ($this->hashIdArr !== null) {
      if (!is_array($this->hashIdArr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hashIdArr', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->hashIdArr));
        {
          foreach ($this->hashIdArr as $kiter7 => $viter8)
          {
            $xfer += $output->writeI64($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getDealDetailForSearch_args {
  static $_TSPEC;

  public $hashIdArr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hashIdArr',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hashIdArr'])) {
        $this->hashIdArr = $vals['hashIdArr'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getDealDetailForSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->hashIdArr = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = 0;
              $val15 = '';
              $xfer += $input->readI64($key14);
              $xfer += $input->readString($val15);
              $this->hashIdArr[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getDealDetailForSearch_args');
    if ($this->hashIdArr !== null) {
      if (!is_array($this->hashIdArr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hashIdArr', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->hashIdArr));
        {
          foreach ($this->hashIdArr as $kiter16 => $viter17)
          {
            $xfer += $output->writeI64($kiter16);
            $xfer += $output->writeString($viter17);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getDealDetailForSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getDealDetailForSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getDealDetailForSearch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getMallDetailForSearch_args {
  static $_TSPEC;

  public $productIdArr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productIdArr',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productIdArr'])) {
        $this->productIdArr = $vals['productIdArr'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getMallDetailForSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->productIdArr = array();
            $_size18 = 0;
            $_ktype19 = 0;
            $_vtype20 = 0;
            $xfer += $input->readMapBegin($_ktype19, $_vtype20, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $key23 = 0;
              $val24 = '';
              $xfer += $input->readI64($key23);
              $xfer += $input->readString($val24);
              $this->productIdArr[$key23] = $val24;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getMallDetailForSearch_args');
    if ($this->productIdArr !== null) {
      if (!is_array($this->productIdArr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productIdArr', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->productIdArr));
        {
          foreach ($this->productIdArr as $kiter25 => $viter26)
          {
            $xfer += $output->writeI64($kiter25);
            $xfer += $output->writeString($viter26);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getMallDetailForSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getMallDetailForSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getMallDetailForSearch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getPopDetailForSearch_args {
  static $_TSPEC;

  public $hashIdArr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hashIdArr',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hashIdArr'])) {
        $this->hashIdArr = $vals['hashIdArr'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getPopDetailForSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->hashIdArr = array();
            $_size27 = 0;
            $_ktype28 = 0;
            $_vtype29 = 0;
            $xfer += $input->readMapBegin($_ktype28, $_vtype29, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $key32 = 0;
              $val33 = '';
              $xfer += $input->readI64($key32);
              $xfer += $input->readString($val33);
              $this->hashIdArr[$key32] = $val33;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getPopDetailForSearch_args');
    if ($this->hashIdArr !== null) {
      if (!is_array($this->hashIdArr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hashIdArr', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->hashIdArr));
        {
          foreach ($this->hashIdArr as $kiter34 => $viter35)
          {
            $xfer += $output->writeI64($kiter34);
            $xfer += $output->writeString($viter35);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getPopDetailForSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getPopDetailForSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getPopDetailForSearch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_args {
  static $_TSPEC;

  public $productIdArr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productIdArr',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productIdArr'])) {
        $this->productIdArr = $vals['productIdArr'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->productIdArr = array();
            $_size36 = 0;
            $_ktype37 = 0;
            $_vtype38 = 0;
            $xfer += $input->readMapBegin($_ktype37, $_vtype38, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $key41 = 0;
              $val42 = '';
              $xfer += $input->readI64($key41);
              $xfer += $input->readString($val42);
              $this->productIdArr[$key41] = $val42;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_args');
    if ($this->productIdArr !== null) {
      if (!is_array($this->productIdArr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productIdArr', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->productIdArr));
        {
          foreach ($this->productIdArr as $kiter43 => $viter44)
          {
            $xfer += $output->writeI64($kiter43);
            $xfer += $output->writeString($viter44);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_args {
  static $_TSPEC;

  public $minPid = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'minPid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['minPid'])) {
        $this->minPid = $vals['minPid'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->minPid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_args');
    if ($this->minPid !== null) {
      $xfer += $output->writeFieldBegin('minPid', TType::I64, 1);
      $xfer += $output->writeI64($this->minPid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I64, 2);
      $xfer += $output->writeI64($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_args {
  static $_TSPEC;

  public $minDealId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'minDealId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['minDealId'])) {
        $this->minDealId = $vals['minDealId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->minDealId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_args');
    if ($this->minDealId !== null) {
      $xfer += $output->writeFieldBegin('minDealId', TType::I64, 1);
      $xfer += $output->writeI64($this->minDealId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I64, 2);
      $xfer += $output->writeI64($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_args {
  static $_TSPEC;

  public $minDealId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'minDealId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['minDealId'])) {
        $this->minDealId = $vals['minDealId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->minDealId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_args');
    if ($this->minDealId !== null) {
      $xfer += $output->writeFieldBegin('minDealId', TType::I64, 1);
      $xfer += $output->writeI64($this->minDealId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I64, 2);
      $xfer += $output->writeI64($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getPOPMallProductIds_args {
  static $_TSPEC;

  public $minProductId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'minProductId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['minProductId'])) {
        $this->minProductId = $vals['minProductId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getPOPMallProductIds_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->minProductId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getPOPMallProductIds_args');
    if ($this->minProductId !== null) {
      $xfer += $output->writeFieldBegin('minProductId', TType::I64, 1);
      $xfer += $output->writeI64($this->minProductId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I64, 2);
      $xfer += $output->writeI64($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getPOPMallProductIds_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getPOPMallProductIds_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getPOPMallProductIds_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_args {
  static $_TSPEC;

  public $minMallId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'minMallId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['minMallId'])) {
        $this->minMallId = $vals['minMallId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->minMallId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_args');
    if ($this->minMallId !== null) {
      $xfer += $output->writeFieldBegin('minMallId', TType::I64, 1);
      $xfer += $output->writeI64($this->minMallId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I64, 2);
      $xfer += $output->writeI64($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalDealDatas_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalDealDatas_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalDealDatas_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalDealDatas_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalDealDatas_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalDealDatas_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_args {
  static $_TSPEC;

  public $minDealId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'minDealId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['minDealId'])) {
        $this->minDealId = $vals['minDealId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->minDealId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_args');
    if ($this->minDealId !== null) {
      $xfer += $output->writeFieldBegin('minDealId', TType::I64, 1);
      $xfer += $output->writeI64($this->minDealId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I64, 2);
      $xfer += $output->writeI64($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_args {
  static $_TSPEC;

  public $productIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productIds',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productIds'])) {
        $this->productIds = $vals['productIds'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->productIds = array();
            $_size45 = 0;
            $_ktype46 = 0;
            $_vtype47 = 0;
            $xfer += $input->readMapBegin($_ktype46, $_vtype47, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $key50 = 0;
              $val51 = 0;
              $xfer += $input->readI64($key50);
              $xfer += $input->readI64($val51);
              $this->productIds[$key50] = $val51;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_args');
    if ($this->productIds !== null) {
      if (!is_array($this->productIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productIds', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::I64, count($this->productIds));
        {
          foreach ($this->productIds as $kiter52 => $viter53)
          {
            $xfer += $output->writeI64($kiter52);
            $xfer += $output->writeI64($viter53);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_args {
  static $_TSPEC;

  public $productIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productIds',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productIds'])) {
        $this->productIds = $vals['productIds'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->productIds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_args');
    if ($this->productIds !== null) {
      $xfer += $output->writeFieldBegin('productIds', TType::I64, 1);
      $xfer += $output->writeI64($this->productIds);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_args {
  static $_TSPEC;

  public $productIdArr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productIdArr',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productIdArr'])) {
        $this->productIdArr = $vals['productIdArr'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->productIdArr = array();
            $_size54 = 0;
            $_ktype55 = 0;
            $_vtype56 = 0;
            $xfer += $input->readMapBegin($_ktype55, $_vtype56, $_size54);
            for ($_i58 = 0; $_i58 < $_size54; ++$_i58)
            {
              $key59 = 0;
              $val60 = '';
              $xfer += $input->readI64($key59);
              $xfer += $input->readString($val60);
              $this->productIdArr[$key59] = $val60;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_args');
    if ($this->productIdArr !== null) {
      if (!is_array($this->productIdArr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productIdArr', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->productIdArr));
        {
          foreach ($this->productIdArr as $kiter61 => $viter62)
          {
            $xfer += $output->writeI64($kiter61);
            $xfer += $output->writeString($viter62);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_args {
  static $_TSPEC;

  public $minMallId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'minMallId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['minMallId'])) {
        $this->minMallId = $vals['minMallId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->minMallId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_args');
    if ($this->minMallId !== null) {
      $xfer += $output->writeFieldBegin('minMallId', TType::I64, 1);
      $xfer += $output->writeI64($this->minMallId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I64, 2);
      $xfer += $output->writeI64($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_args {
  static $_TSPEC;

  public $minDealId = null;
  public $limit = null;
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'minDealId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['minDealId'])) {
        $this->minDealId = $vals['minDealId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->minDealId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_args');
    if ($this->minDealId !== null) {
      $xfer += $output->writeFieldBegin('minDealId', TType::I64, 1);
      $xfer += $output->writeI64($this->minDealId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I64, 2);
      $xfer += $output->writeI64($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumeiProduct_Search_Read_DealsProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_getGlobalDealDetailForSearch($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDetailForSearch_result();
    $result->success = $this->handler_->getGlobalDealDetailForSearch($args->hashIdArr);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getGlobalDealDetailForSearch', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getGlobalDealDetailForSearch', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getDealDetailForSearch($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getDealDetailForSearch_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getDealDetailForSearch_result();
    $result->success = $this->handler_->getDealDetailForSearch($args->hashIdArr);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getDealDetailForSearch', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getDealDetailForSearch', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getMallDetailForSearch($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getMallDetailForSearch_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getMallDetailForSearch_result();
    $result->success = $this->handler_->getMallDetailForSearch($args->productIdArr);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getMallDetailForSearch', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getMallDetailForSearch', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPopDetailForSearch($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPopDetailForSearch_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPopDetailForSearch_result();
    $result->success = $this->handler_->getPopDetailForSearch($args->hashIdArr);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPopDetailForSearch', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPopDetailForSearch', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getGlobalMallDetailForSearch($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalMallDetailForSearch_result();
    $result->success = $this->handler_->getGlobalMallDetailForSearch($args->productIdArr);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getGlobalMallDetailForSearch', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getGlobalMallDetailForSearch', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPidOfJumeiMallByLimit($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPidOfJumeiMallByLimit_result();
    $result->success = $this->handler_->getPidOfJumeiMallByLimit($args->minPid, $args->limit);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPidOfJumeiMallByLimit', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPidOfJumeiMallByLimit', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getHashIdOfPOPByLimit($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getHashIdOfPOPByLimit_result();
    $result->success = $this->handler_->getHashIdOfPOPByLimit($args->minDealId, $args->limit);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getHashIdOfPOPByLimit', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getHashIdOfPOPByLimit', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getJumeiDataWithMinDealIdAndLimit($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getJumeiDataWithMinDealIdAndLimit_result();
    $result->success = $this->handler_->getJumeiDataWithMinDealIdAndLimit($args->minDealId, $args->limit);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getJumeiDataWithMinDealIdAndLimit', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getJumeiDataWithMinDealIdAndLimit', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPOPMallProductIds($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPOPMallProductIds_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPOPMallProductIds_result();
    $result->success = $this->handler_->getPOPMallProductIds($args->minProductId, $args->limit);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPOPMallProductIds', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPOPMallProductIds', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getMallDataWithMallIdAndLimit($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getMallDataWithMallIdAndLimit_result();
    $result->success = $this->handler_->getMallDataWithMallIdAndLimit($args->minMallId, $args->limit);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getMallDataWithMallIdAndLimit', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getMallDataWithMallIdAndLimit', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getGlobalDealDatas($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDatas_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDatas_result();
    $result->success = $this->handler_->getGlobalDealDatas();
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getGlobalDealDatas', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getGlobalDealDatas', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getGlobalDealDatasWithDealIdAndLimit($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalDealDatasWithDealIdAndLimit_result();
    $result->success = $this->handler_->getGlobalDealDatasWithDealIdAndLimit($args->minDealId, $args->limit);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getGlobalDealDatasWithDealIdAndLimit', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getGlobalDealDatasWithDealIdAndLimit', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getpPomoCardsDeal($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getpPomoCardsDeal_result();
    $result->success = $this->handler_->getpPomoCardsDeal();
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getpPomoCardsDeal', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getpPomoCardsDeal', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPopMallDetailForSearch($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getPopMallDetailForSearch_result();
    $result->success = $this->handler_->getPopMallDetailForSearch($args->productIds);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPopMallDetailForSearch', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPopMallDetailForSearch', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getHashIdByProdcutId($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getHashIdByProdcutId_result();
    $result->success = $this->handler_->getHashIdByProdcutId($args->productIds);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getHashIdByProdcutId', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getHashIdByProdcutId', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getGlobalPOPMallDetailForSearch($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalPOPMallDetailForSearch_result();
    $result->success = $this->handler_->getGlobalPOPMallDetailForSearch($args->productIdArr);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getGlobalPOPMallDetailForSearch', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getGlobalPOPMallDetailForSearch', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getGlobalPOPMallDataWithMallIdAndLimit($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getGlobalPOPMallDataWithMallIdAndLimit_result();
    $result->success = $this->handler_->getGlobalPOPMallDataWithMallIdAndLimit($args->minMallId, $args->limit);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getGlobalPOPMallDataWithMallIdAndLimit', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getGlobalPOPMallDataWithMallIdAndLimit', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getYQTByTypeLimit($seqid, $input, $output) {
    $args = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\JumeiProduct_Search_Read_Deals\JumeiProduct_Search_Read_Deals_getYQTByTypeLimit_result();
    $result->success = $this->handler_->getYQTByTypeLimit($args->minDealId, $args->limit, $args->type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getYQTByTypeLimit', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getYQTByTypeLimit', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

