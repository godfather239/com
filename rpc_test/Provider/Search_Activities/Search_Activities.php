<?php
namespace Provider\Search_Activities;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface Search_ActivitiesIf {
  public function getActivityListByPage($page);
  public function getDealAndProductActivityRelation($hashIds, $productIds, $mallIds);
}

class Search_ActivitiesClient implements \Provider\Search_Activities\Search_ActivitiesIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getActivityListByPage($page)
  {
    $this->send_getActivityListByPage($page);
    return $this->recv_getActivityListByPage();
  }

  public function send_getActivityListByPage($page)
  {
    $args = new \Provider\Search_Activities\Search_Activities_getActivityListByPage_args();
    $args->page = $page;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getActivityListByPage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getActivityListByPage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getActivityListByPage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\Search_Activities\Search_Activities_getActivityListByPage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\Search_Activities\Search_Activities_getActivityListByPage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getActivityListByPage failed: unknown result");
  }

  public function getDealAndProductActivityRelation($hashIds, $productIds, $mallIds)
  {
    $this->send_getDealAndProductActivityRelation($hashIds, $productIds, $mallIds);
    return $this->recv_getDealAndProductActivityRelation();
  }

  public function send_getDealAndProductActivityRelation($hashIds, $productIds, $mallIds)
  {
    $args = new \Provider\Search_Activities\Search_Activities_getDealAndProductActivityRelation_args();
    $args->hashIds = $hashIds;
    $args->productIds = $productIds;
    $args->mallIds = $mallIds;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getDealAndProductActivityRelation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getDealAndProductActivityRelation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getDealAndProductActivityRelation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\Search_Activities\Search_Activities_getDealAndProductActivityRelation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\Search_Activities\Search_Activities_getDealAndProductActivityRelation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getDealAndProductActivityRelation failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Search_Activities_getActivityListByPage_args {
  static $_TSPEC;

  public $page = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'page',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
    }
  }

  public function getName() {
    return 'Search_Activities_getActivityListByPage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Search_Activities_getActivityListByPage_args');
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I64, 1);
      $xfer += $output->writeI64($this->page);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Search_Activities_getActivityListByPage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Search_Activities_getActivityListByPage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = array();
              $xfer += $input->readI64($key5);
              $val6 = array();
              $_size7 = 0;
              $_ktype8 = 0;
              $_vtype9 = 0;
              $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
              for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
              {
                $key12 = '';
                $val13 = '';
                $xfer += $input->readString($key12);
                $xfer += $input->readString($val13);
                $val6[$key12] = $val13;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Search_Activities_getActivityListByPage_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter14 => $viter15)
          {
            $xfer += $output->writeI64($kiter14);
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($viter15));
              {
                foreach ($viter15 as $kiter16 => $viter17)
                {
                  $xfer += $output->writeString($kiter16);
                  $xfer += $output->writeString($viter17);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Search_Activities_getDealAndProductActivityRelation_args {
  static $_TSPEC;

  public $hashIds = null;
  public $productIds = null;
  public $mallIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hashIds',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'productIds',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'mallIds',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hashIds'])) {
        $this->hashIds = $vals['hashIds'];
      }
      if (isset($vals['productIds'])) {
        $this->productIds = $vals['productIds'];
      }
      if (isset($vals['mallIds'])) {
        $this->mallIds = $vals['mallIds'];
      }
    }
  }

  public function getName() {
    return 'Search_Activities_getDealAndProductActivityRelation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->hashIds = array();
            $_size18 = 0;
            $_ktype19 = 0;
            $_vtype20 = 0;
            $xfer += $input->readMapBegin($_ktype19, $_vtype20, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $key23 = 0;
              $val24 = '';
              $xfer += $input->readI64($key23);
              $xfer += $input->readString($val24);
              $this->hashIds[$key23] = $val24;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->productIds = array();
            $_size25 = 0;
            $_ktype26 = 0;
            $_vtype27 = 0;
            $xfer += $input->readMapBegin($_ktype26, $_vtype27, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $key30 = 0;
              $val31 = 0;
              $xfer += $input->readI64($key30);
              $xfer += $input->readI64($val31);
              $this->productIds[$key30] = $val31;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->mallIds = array();
            $_size32 = 0;
            $_ktype33 = 0;
            $_vtype34 = 0;
            $xfer += $input->readMapBegin($_ktype33, $_vtype34, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $key37 = 0;
              $val38 = 0;
              $xfer += $input->readI64($key37);
              $xfer += $input->readI64($val38);
              $this->mallIds[$key37] = $val38;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Search_Activities_getDealAndProductActivityRelation_args');
    if ($this->hashIds !== null) {
      if (!is_array($this->hashIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hashIds', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->hashIds));
        {
          foreach ($this->hashIds as $kiter39 => $viter40)
          {
            $xfer += $output->writeI64($kiter39);
            $xfer += $output->writeString($viter40);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productIds !== null) {
      if (!is_array($this->productIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productIds', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I64, TType::I64, count($this->productIds));
        {
          foreach ($this->productIds as $kiter41 => $viter42)
          {
            $xfer += $output->writeI64($kiter41);
            $xfer += $output->writeI64($viter42);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mallIds !== null) {
      if (!is_array($this->mallIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mallIds', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I64, TType::I64, count($this->mallIds));
        {
          foreach ($this->mallIds as $kiter43 => $viter44)
          {
            $xfer += $output->writeI64($kiter43);
            $xfer += $output->writeI64($viter44);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Search_Activities_getDealAndProductActivityRelation_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::MAP,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::MAP,
              'ktype' => TType::I64,
              'vtype' => TType::STRING,
              'key' => array(
                'type' => TType::I64,
              ),
              'val' => array(
                'type' => TType::STRING,
                ),
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Search_Activities_getDealAndProductActivityRelation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size45 = 0;
            $_ktype46 = 0;
            $_vtype47 = 0;
            $xfer += $input->readMapBegin($_ktype46, $_vtype47, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $key50 = '';
              $val51 = array();
              $xfer += $input->readString($key50);
              $val51 = array();
              $_size52 = 0;
              $_ktype53 = 0;
              $_vtype54 = 0;
              $xfer += $input->readMapBegin($_ktype53, $_vtype54, $_size52);
              for ($_i56 = 0; $_i56 < $_size52; ++$_i56)
              {
                $key57 = '';
                $val58 = array();
                $xfer += $input->readString($key57);
                $val58 = array();
                $_size59 = 0;
                $_ktype60 = 0;
                $_vtype61 = 0;
                $xfer += $input->readMapBegin($_ktype60, $_vtype61, $_size59);
                for ($_i63 = 0; $_i63 < $_size59; ++$_i63)
                {
                  $key64 = 0;
                  $val65 = '';
                  $xfer += $input->readI64($key64);
                  $xfer += $input->readString($val65);
                  $val58[$key64] = $val65;
                }
                $xfer += $input->readMapEnd();
                $val51[$key57] = $val58;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key50] = $val51;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Search_Activities_getDealAndProductActivityRelation_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter66 => $viter67)
          {
            $xfer += $output->writeString($kiter66);
            {
              $output->writeMapBegin(TType::STRING, TType::MAP, count($viter67));
              {
                foreach ($viter67 as $kiter68 => $viter69)
                {
                  $xfer += $output->writeString($kiter68);
                  {
                    $output->writeMapBegin(TType::I64, TType::STRING, count($viter69));
                    {
                      foreach ($viter69 as $kiter70 => $viter71)
                      {
                        $xfer += $output->writeI64($kiter70);
                        $xfer += $output->writeString($viter71);
                      }
                    }
                    $output->writeMapEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Search_ActivitiesProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_getActivityListByPage($seqid, $input, $output) {
    $args = new \Provider\Search_Activities\Search_Activities_getActivityListByPage_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\Search_Activities\Search_Activities_getActivityListByPage_result();
    $result->success = $this->handler_->getActivityListByPage($args->page);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getActivityListByPage', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getActivityListByPage', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getDealAndProductActivityRelation($seqid, $input, $output) {
    $args = new \Provider\Search_Activities\Search_Activities_getDealAndProductActivityRelation_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\Search_Activities\Search_Activities_getDealAndProductActivityRelation_result();
    $result->success = $this->handler_->getDealAndProductActivityRelation($args->hashIds, $args->productIds, $args->mallIds);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getDealAndProductActivityRelation', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getDealAndProductActivityRelation', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

