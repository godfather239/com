<?php
namespace Provider\Series;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface SeriesIf {
  public function getSeriesInfoByProductId($productIds, $skipCache);
  public function getSeriesInfoByProductAndStore($filter, $skipCache);
  public function getSeriesById($sid);
}

class SeriesClient implements \Provider\Series\SeriesIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getSeriesInfoByProductId($productIds, $skipCache)
  {
    $this->send_getSeriesInfoByProductId($productIds, $skipCache);
    return $this->recv_getSeriesInfoByProductId();
  }

  public function send_getSeriesInfoByProductId($productIds, $skipCache)
  {
    $args = new \Provider\Series\Series_getSeriesInfoByProductId_args();
    $args->productIds = $productIds;
    $args->skipCache = $skipCache;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSeriesInfoByProductId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSeriesInfoByProductId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSeriesInfoByProductId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\Series\Series_getSeriesInfoByProductId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\Series\Series_getSeriesInfoByProductId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSeriesInfoByProductId failed: unknown result");
  }

  public function getSeriesInfoByProductAndStore($filter, $skipCache)
  {
    $this->send_getSeriesInfoByProductAndStore($filter, $skipCache);
    return $this->recv_getSeriesInfoByProductAndStore();
  }

  public function send_getSeriesInfoByProductAndStore($filter, $skipCache)
  {
    $args = new \Provider\Series\Series_getSeriesInfoByProductAndStore_args();
    $args->filter = $filter;
    $args->skipCache = $skipCache;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSeriesInfoByProductAndStore', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSeriesInfoByProductAndStore', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSeriesInfoByProductAndStore()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\Series\Series_getSeriesInfoByProductAndStore_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\Series\Series_getSeriesInfoByProductAndStore_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSeriesInfoByProductAndStore failed: unknown result");
  }

  public function getSeriesById($sid)
  {
    $this->send_getSeriesById($sid);
    return $this->recv_getSeriesById();
  }

  public function send_getSeriesById($sid)
  {
    $args = new \Provider\Series\Series_getSeriesById_args();
    $args->sid = $sid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSeriesById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSeriesById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSeriesById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Provider\Series\Series_getSeriesById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Provider\Series\Series_getSeriesById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSeriesById failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Series_getSeriesInfoByProductId_args {
  static $_TSPEC;

  public $productIds = null;
  public $skipCache = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productIds',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'skipCache',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productIds'])) {
        $this->productIds = $vals['productIds'];
      }
      if (isset($vals['skipCache'])) {
        $this->skipCache = $vals['skipCache'];
      }
    }
  }

  public function getName() {
    return 'Series_getSeriesInfoByProductId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->productIds = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = 0;
              $xfer += $input->readI32($key5);
              $xfer += $input->readI64($val6);
              $this->productIds[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->skipCache);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Series_getSeriesInfoByProductId_args');
    if ($this->productIds !== null) {
      if (!is_array($this->productIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productIds', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::I64, count($this->productIds));
        {
          foreach ($this->productIds as $kiter7 => $viter8)
          {
            $xfer += $output->writeI32($kiter7);
            $xfer += $output->writeI64($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->skipCache !== null) {
      $xfer += $output->writeFieldBegin('skipCache', TType::I64, 2);
      $xfer += $output->writeI64($this->skipCache);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Series_getSeriesInfoByProductId_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I64,
            'vtype' => TType::MAP,
            'key' => array(
              'type' => TType::I64,
            ),
            'val' => array(
              'type' => TType::MAP,
              'ktype' => TType::I64,
              'vtype' => TType::MAP,
              'key' => array(
                'type' => TType::I64,
              ),
              'val' => array(
                'type' => TType::MAP,
                'ktype' => TType::STRING,
                'vtype' => TType::STRING,
                'key' => array(
                  'type' => TType::STRING,
                ),
                'val' => array(
                  'type' => TType::STRING,
                  ),
                ),
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Series_getSeriesInfoByProductId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = 0;
              $val15 = array();
              $xfer += $input->readI64($key14);
              $val15 = array();
              $_size16 = 0;
              $_ktype17 = 0;
              $_vtype18 = 0;
              $xfer += $input->readMapBegin($_ktype17, $_vtype18, $_size16);
              for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
              {
                $key21 = 0;
                $val22 = array();
                $xfer += $input->readI64($key21);
                $val22 = array();
                $_size23 = 0;
                $_ktype24 = 0;
                $_vtype25 = 0;
                $xfer += $input->readMapBegin($_ktype24, $_vtype25, $_size23);
                for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
                {
                  $key28 = 0;
                  $val29 = array();
                  $xfer += $input->readI64($key28);
                  $val29 = array();
                  $_size30 = 0;
                  $_ktype31 = 0;
                  $_vtype32 = 0;
                  $xfer += $input->readMapBegin($_ktype31, $_vtype32, $_size30);
                  for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
                  {
                    $key35 = '';
                    $val36 = '';
                    $xfer += $input->readString($key35);
                    $xfer += $input->readString($val36);
                    $val29[$key35] = $val36;
                  }
                  $xfer += $input->readMapEnd();
                  $val22[$key28] = $val29;
                }
                $xfer += $input->readMapEnd();
                $val15[$key21] = $val22;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Series_getSeriesInfoByProductId_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter37 => $viter38)
          {
            $xfer += $output->writeI64($kiter37);
            {
              $output->writeMapBegin(TType::I64, TType::MAP, count($viter38));
              {
                foreach ($viter38 as $kiter39 => $viter40)
                {
                  $xfer += $output->writeI64($kiter39);
                  {
                    $output->writeMapBegin(TType::I64, TType::MAP, count($viter40));
                    {
                      foreach ($viter40 as $kiter41 => $viter42)
                      {
                        $xfer += $output->writeI64($kiter41);
                        {
                          $output->writeMapBegin(TType::STRING, TType::STRING, count($viter42));
                          {
                            foreach ($viter42 as $kiter43 => $viter44)
                            {
                              $xfer += $output->writeString($kiter43);
                              $xfer += $output->writeString($viter44);
                            }
                          }
                          $output->writeMapEnd();
                        }
                      }
                    }
                    $output->writeMapEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Series_getSeriesInfoByProductAndStore_args {
  static $_TSPEC;

  public $filter = null;
  public $skipCache = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'filter',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::I64,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        2 => array(
          'var' => 'skipCache',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
      if (isset($vals['skipCache'])) {
        $this->skipCache = $vals['skipCache'];
      }
    }
  }

  public function getName() {
    return 'Series_getSeriesInfoByProductAndStore_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->filter = array();
            $_size45 = 0;
            $_ktype46 = 0;
            $_vtype47 = 0;
            $xfer += $input->readMapBegin($_ktype46, $_vtype47, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $key50 = 0;
              $val51 = array();
              $xfer += $input->readI32($key50);
              $val51 = array();
              $_size52 = 0;
              $_ktype53 = 0;
              $_vtype54 = 0;
              $xfer += $input->readMapBegin($_ktype53, $_vtype54, $_size52);
              for ($_i56 = 0; $_i56 < $_size52; ++$_i56)
              {
                $key57 = 0;
                $val58 = 0;
                $xfer += $input->readI32($key57);
                $xfer += $input->readI64($val58);
                $val51[$key57] = $val58;
              }
              $xfer += $input->readMapEnd();
              $this->filter[$key50] = $val51;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->skipCache);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Series_getSeriesInfoByProductAndStore_args');
    if ($this->filter !== null) {
      if (!is_array($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::MAP, count($this->filter));
        {
          foreach ($this->filter as $kiter59 => $viter60)
          {
            $xfer += $output->writeI32($kiter59);
            {
              $output->writeMapBegin(TType::I32, TType::I64, count($viter60));
              {
                foreach ($viter60 as $kiter61 => $viter62)
                {
                  $xfer += $output->writeI32($kiter61);
                  $xfer += $output->writeI64($viter62);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->skipCache !== null) {
      $xfer += $output->writeFieldBegin('skipCache', TType::I64, 2);
      $xfer += $output->writeI64($this->skipCache);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Series_getSeriesInfoByProductAndStore_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I64,
            'vtype' => TType::MAP,
            'key' => array(
              'type' => TType::I64,
            ),
            'val' => array(
              'type' => TType::MAP,
              'ktype' => TType::I64,
              'vtype' => TType::MAP,
              'key' => array(
                'type' => TType::I64,
              ),
              'val' => array(
                'type' => TType::MAP,
                'ktype' => TType::STRING,
                'vtype' => TType::STRING,
                'key' => array(
                  'type' => TType::STRING,
                ),
                'val' => array(
                  'type' => TType::STRING,
                  ),
                ),
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Series_getSeriesInfoByProductAndStore_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size63 = 0;
            $_ktype64 = 0;
            $_vtype65 = 0;
            $xfer += $input->readMapBegin($_ktype64, $_vtype65, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $key68 = 0;
              $val69 = array();
              $xfer += $input->readI64($key68);
              $val69 = array();
              $_size70 = 0;
              $_ktype71 = 0;
              $_vtype72 = 0;
              $xfer += $input->readMapBegin($_ktype71, $_vtype72, $_size70);
              for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
              {
                $key75 = 0;
                $val76 = array();
                $xfer += $input->readI64($key75);
                $val76 = array();
                $_size77 = 0;
                $_ktype78 = 0;
                $_vtype79 = 0;
                $xfer += $input->readMapBegin($_ktype78, $_vtype79, $_size77);
                for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
                {
                  $key82 = 0;
                  $val83 = array();
                  $xfer += $input->readI64($key82);
                  $val83 = array();
                  $_size84 = 0;
                  $_ktype85 = 0;
                  $_vtype86 = 0;
                  $xfer += $input->readMapBegin($_ktype85, $_vtype86, $_size84);
                  for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
                  {
                    $key89 = '';
                    $val90 = '';
                    $xfer += $input->readString($key89);
                    $xfer += $input->readString($val90);
                    $val83[$key89] = $val90;
                  }
                  $xfer += $input->readMapEnd();
                  $val76[$key82] = $val83;
                }
                $xfer += $input->readMapEnd();
                $val69[$key75] = $val76;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key68] = $val69;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Series_getSeriesInfoByProductAndStore_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter91 => $viter92)
          {
            $xfer += $output->writeI64($kiter91);
            {
              $output->writeMapBegin(TType::I64, TType::MAP, count($viter92));
              {
                foreach ($viter92 as $kiter93 => $viter94)
                {
                  $xfer += $output->writeI64($kiter93);
                  {
                    $output->writeMapBegin(TType::I64, TType::MAP, count($viter94));
                    {
                      foreach ($viter94 as $kiter95 => $viter96)
                      {
                        $xfer += $output->writeI64($kiter95);
                        {
                          $output->writeMapBegin(TType::STRING, TType::STRING, count($viter96));
                          {
                            foreach ($viter96 as $kiter97 => $viter98)
                            {
                              $xfer += $output->writeString($kiter97);
                              $xfer += $output->writeString($viter98);
                            }
                          }
                          $output->writeMapEnd();
                        }
                      }
                    }
                    $output->writeMapEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Series_getSeriesById_args {
  static $_TSPEC;

  public $sid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
    }
  }

  public function getName() {
    return 'Series_getSeriesById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Series_getSeriesById_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::I64, 1);
      $xfer += $output->writeI64($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Series_getSeriesById_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Series_getSeriesById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Series_getSeriesById_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SeriesProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_getSeriesInfoByProductId($seqid, $input, $output) {
    $args = new \Provider\Series\Series_getSeriesInfoByProductId_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\Series\Series_getSeriesInfoByProductId_result();
    $result->success = $this->handler_->getSeriesInfoByProductId($args->productIds, $args->skipCache);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSeriesInfoByProductId', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSeriesInfoByProductId', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSeriesInfoByProductAndStore($seqid, $input, $output) {
    $args = new \Provider\Series\Series_getSeriesInfoByProductAndStore_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\Series\Series_getSeriesInfoByProductAndStore_result();
    $result->success = $this->handler_->getSeriesInfoByProductAndStore($args->filter, $args->skipCache);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSeriesInfoByProductAndStore', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSeriesInfoByProductAndStore', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSeriesById($seqid, $input, $output) {
    $args = new \Provider\Series\Series_getSeriesById_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Provider\Series\Series_getSeriesById_result();
    $result->success = $this->handler_->getSeriesById($args->sid);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSeriesById', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSeriesById', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

